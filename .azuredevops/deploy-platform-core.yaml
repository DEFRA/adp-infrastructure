parameters:
  - name: deployFromFeature
    displayName: "Deploy from Feature Branch"
    type: boolean
    default: false
  - name: deployResourceCategory
    displayName: Resource Category to deploy
    type: string
    default: others
    values:
      - 1-all
      - 2-network
      - 3-monitoring
      - 4-frontdoor
      - 5-applicationinfra
      - 6-managedcluster
      - 7-others   # no category
  - name: deployResourceType
    displayName: Resource Type to deploy
    type: string
    default: 1.all
    values:
      - 1.all   # no category
      - 2.1-nsg
      - 2.2-udr
      - 2.3-vnet
      - 3.1-workspace
      - 3.2-components
      - 4.1-azurewaf
      - 4.2-frontdoor
      - 5.1-configurationstore
      - 5.2-applicationcontainerregistry
      - 5.3-flexibleserver
      - 5.4-rediscache
      - 5.5-applicationstorageaccount
      - 6.1-akscluster
      - 6.2-grafana      
      - 7.1-applicationkeyvault
      - 7.2-namespace
      - 7.1-managedidentity

pr:
  branches:
    include:
      - main
  paths:
    include:
      - infra/core/*
      - infra/common/*
trigger:
  batch: true
  branches:
    include:
      - '*'
  paths:
    include:
      - infra/core/*
      - infra/common/*

resources:
  repositories:
    - repository: ADPPipelineCommon
      name: DEFRA/adp-pipeline-common
      endpoint: DEFRA
      type: github
      ref:  main

variables: 
  deployAll: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceType}}',  '1-all')) ]

  deployNetworkGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '2-network'), eq('${{parameters.deployResourceCategory}}', '6-managedcluster')]
  deployUDR: $[ or(eq(variables.deployNetworkGroup, true), eq('${{parameters.deployResourceType}}', 'udr')) ]
  deployNSG: $[ or(eq(variables.deployNetworkGroup, true), eq('${{parameters.deployResourceType}}', 'nsg')) ]
  deployVNET: $[ or(eq(variables.deployNetworkGroup, true), eq('${{parameters.deployResourceType}}', 'vnet')) ]

  deployMonitoringGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '3-monitoring')]
  deployWorkspace: $[ or(eq('${{parameters.deployResourceCategory}}', '3-monitoring'), eq('${{parameters.deployResourceType}}', '3.1-workspace')) ]
  deployComponents: $[ or(eq('${{parameters.deployResourceCategory}}', '3-monitoring'), eq('${{parameters.deployResourceType}}', '3.2-components')) ]

  deployFrontDoorGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '4-frontdoor')]
  deployFrontDoor: $[ or(eq('${{parameters.deployResourceCategory}}', '4-frontdoor'), eq('${{parameters.deployResourceType}}', 'frontdoor')) ]
  deployAzureWaf: $[ or(eq('${{parameters.deployResourceCategory}}', '4-frontdoor'), eq('${{parameters.deployResourceType}}', 'azurewaf')) ]

  deployApplicationInfraGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '5-applicationinfra')]
  deployConfigurationStore: $[ or(eq('${{parameters.deployResourceCategory}}', '5-applicationinfra'), eq('${{parameters.deployResourceType}}', 'configurationstore')) ]
  deployApplicationContainerRegistry: $[ or(eq('${{parameters.deployResourceCategory}}', '5-applicationinfra'), eq('${{parameters.deployResourceType}}', 'applicationcontainerregistry')) ]
  deployApplicationFlexibleServer: $[ or(eq('${{parameters.deployResourceCategory}}', '5-applicationinfra'), eq('${{parameters.deployResourceType}}', 'flexibleserver')) ]
  deployApplicationRedisCache: $[ or(eq('${{parameters.deployResourceCategory}}', '5-applicationinfra'), eq('${{parameters.deployResourceType}}', 'rediscache')) ]
  deployApplicationApplicationStorageAccount: $[ or(eq('${{parameters.deployResourceCategory}}', '5-applicationinfra'), eq('${{parameters.deployResourceType}}', 'applicationstorageaccount')) ]
  
  deployManagedClusterGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '6-managedcluster')]
  deployAksCluster: $[ and(eq('${{parameters.deployResourceCategory}}', 'managedcluster'), eq('${{parameters.deployResourceType}}', 'akscluster')) ]
  deployGrafana: $[ and(eq('${{parameters.deployResourceCategory}}','managedcluster'), eq('${{parameters.deployResourceType}}', 'grafana')) ]
  
  deployOthersGroup: $[ or(eq('${{parameters.deployResourceCategory}}', '1-all'), eq('${{parameters.deployResourceCategory}}', '7-others')]
  deployApplicationKeyVault: $[ and(eq('${{parameters.deployResourceCategory}}',  '7-others'), eq('${{parameters.deployResourceType}}', 'applicationkeyvault')) ]
  deloyManagedIdentity: $[ and(eq('${{parameters.deployResourceCategory}}',  '7-others'), eq('${{parameters.deployResourceType}}', 'managedidentity')) ]
  deployNamespace: $[ and(eq('${{parameters.deployResourceCategory}}', '7-others'), eq('${{parameters.deployResourceType}}', 'namespace')) ]
  
  deployNone:  $[ and(eq('${{parameters.deployResourceCategory}}',  '7-others'), eq('${{parameters.deployResourceType}}',  '1-all')) ]


extends:
  template: /pipelines/common-infra-deploy.yaml@ADPPipelineCommon
  parameters:
    projectName: $(projectName)
    deployFromFeature: ${{ parameters.deployFromFeature }}
    environments:
      - name: 'snd2'
        serviceConnection: AZD-CDO-SND2
        deploymentBranches:
          - '*'
        developmentEnvironment: true
        azureRegions:
          primary: 'UKSouth'    
    groupedTemplates:
      - $[ if eq(variables.deployNone, true) ]:
        - name: echo
          templates:
            - name: echo
              path: infra/core/echo
              resourceGroupName: $(servicesResourceGroup)
      - $[ if eq(variables.deployNetworkGroup, true) ]:
        - name: network
          templates:
            - $[ if eq(variables.deployUDR, true) ]:
              - name: route-table
                path: infra/common/network
                resourceGroupName: $(virtualNetworkResourceGroup)
            - $[ if eq(variables.deployNSG, true) ]:
              - name: subnet-nsg
                path: infra/common/network
                resourceGroupName: $(virtualNetworkResourceGroup)
            - $[ if eq(variables.deployVNET, true) ]:
              - name: virtual-network
                path: infra/common/network
                resourceGroupName: $(virtualNetworkResourceGroup)
      - $[ if eq(variables.deployMonitoringGroup, true) ]:
        - name: monitoring
          templates:
            - name: workspace
              path: infra/core/operational-insights
              resourceGroupName: $(servicesResourceGroup)
            - name: component
              path: infra/core/insights
              resourceGroupName: $(servicesResourceGroup)
      - $[ if eq(variables.deployManagedClusterGroup, true) ]:
        - name: managed_cluster
          dependsOnGroupedTemplates:
            - network
          templates:
            - name: aks-cluster
              path: infra/core/managed-cluster
              resourceGroupName: $(aksResourceGroup)
              postDeployScriptsList:
                - displayName: Link the Private DNS Zone to Central networks
                  scriptPath: infra/core/scripts/Trigger-LinkPrivateDNSZones.ps1
                  type: PowerShell
                  useSystemAccessToken: true
                  scriptArguments: >
                    -PrivateDnsZoneName "$(dnsResourceNamePrefix)$(nc_resource_dnszone)$(nc_instance_regionid)01.privatelink.$(location).azmk8s.io"
                    -ResourceGroupName $(aksResourceGroup)
                    -SubscriptionName $(subscriptionName)
                    -TenantId $(tenantId)
            - name: grafana
              serviceConnectionVariableName: ssvServiceConnection
              path: infra/core/observability
              resourceGroupName: $(ssvSharedResourceGroup)
              preDeployScriptsList:
                - displayName: Get Azure Monitor Workspace Resource IDs to link to Grafana Dashboard
                  scriptPath: infra/core/scripts/Get-WorkspaceResourceIds.ps1
                  serviceConnectionVariableName: ssvServiceConnection
                  type: AzurePowerShell
                  scriptArguments: >
                    -ResourceGroupName $(ssvSharedResourceGroup)
                    -GrafanaName $(ssvResourceNamePrefix)$(nc_resource_grafana)$(nc_shared_instance_regionid)01
                    -WorkspaceResourceId '/subscriptions/$(subscriptionId)/resourceGroups/$(aksResourceGroup)/providers/Microsoft.Monitor/accounts/$(infraResourceNamePrefix)$(nc_resource_azuremonitorworkspace)$(nc_instance_regionid)01'
      - $[ if eq(variables.deployOthersGroup, true) ]:                    
        - name: service_bus
          templates:
            - name: namespace
              path: infra/core/service-bus
              resourceGroupName: $(servicesResourceGroup)
              privateEndpointDnsRecordsForResources:
                - resourceName: $(infraResourceNamePrefix)$(nc_resource_servicebus)$(nc_instance_regionid)01
                  resourceGroupName: $(servicesResourceGroup)
      - $[ if eq(variables.deployFrontDoorGroup, true) ]:
        - name: front_door
          templates:
            - name: front-door
              path: infra/core/front-door
              resourceGroupName: $(frontDoorResourceGroup)
            - name: azure-waf
              path: infra/core/front-door
              resourceGroupName: $(frontDoorResourceGroup)
      - $[ if eq(variables.deployApplicationInfraGroup, true) ]:
        - name: application_infra
          templates:
            - name: configuration-store
              path: infra/core/app-configuration
              resourceGroupName: $(servicesResourceGroup)
              privateEndpointDnsRecordsForResources:
                - resourceName: $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                  resourceGroupName: $(servicesResourceGroup)
            - name: application-container-registry
              path: infra/core/container-registry
              resourceGroupName: $(servicesResourceGroup)
              privateEndpointDnsRecordsForResources:
                - resourceName: $(infraResourceNamePrefix)$(nc_resource_containerregistry)$(nc_instance_regionid)01
                  resourceGroupName: $(servicesResourceGroup)
            - name: flexible-server
              path: infra/core/postgre-sql
              resourceGroupName: $(dbsResourceGroup)
            - name: redis-cache
              path: infra/core/redis-cache
              resourceGroupName: $(servicesResourceGroup)
            - name: application-storage-account
              path: infra/core/storage-account
              resourceGroupName: $(servicesResourceGroup)
              privateEndpointDnsRecordsForResources:
                - resourceName: $(infraResourceNamePrefix)$(nc_resource_storageaccount)$(nc_instance_regionid)01
                  resourceGroupName: $(servicesResourceGroup)
        - name: security
          dependsOnGroupedTemplates:
            - network
          templates:
            - name: application-key-vault
              path: infra/core/key-vault
              resourceGroupName: $(servicesResourceGroup)
              privateEndpointDnsRecordsForResources:
                - resourceName: $(infraResourceNamePrefix)$(nc_resource_keyvault)$(nc_instance_regionid)01
                  resourceGroupName: $(servicesResourceGroup)