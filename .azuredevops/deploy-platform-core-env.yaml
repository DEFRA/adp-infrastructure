name: 1.0.$(BuildID)-${{ parameters.deployResources }}

parameters:
  - name: deployFromFeature
    displayName: "Deploy from Feature Branch"
    type: boolean
    default: false
  - name: deployResources
    displayName: "Resources to Deploy"
    type: string
    default: "All"
    values:
      - All
      - Network - All
      - Network - VNET
      - Network - NSGs
      - Network - Route Tables
      - Network - Public DNS Zone
      - Monitoring - All
      - Monitoring - Insights
      - Monitoring - Azure Monitor Workspace
      - Monitoring - Grafana
      - Monitoring - Prometheus Alerts
      - Managed Cluster - All
      - Managed Cluster - Private DNS Zone
      - Managed Cluster - Cluster
      - Managed Cluster - Flux Services SSH Keys
      - Managed Cluster - Platform Variables
      - Front Door - All
      - Front Door - Core
      - Front Door - WAF Baseline Internal
      - Front Door - WAF Baseline External
      - Front Door - WAF ADP Portal
      - Application - All
      - Application - App Configuration
      - Application - Apps Container Registry
      - Application - PostgreSql Server
      - Application - Redis Cache
      - Application - Storage Account
      - Application - Service Bus
      - Application - Key Vault
      - Application - Key Vault - Public
      - Platform - Key Vault
      - OpenAI - All
      - OpenAI - Infra  
      - OpenAI - Search Service
      - Rbac - Global Team Permissions

pr:
  branches:
    include:
      - main
  paths:
    include:
      - infra/core/env/*
      - infra/common/*
  drafts: false
        
trigger:
  batch: true
  branches:
    include:
      - '*'
  paths:
    include:
      - infra/core/env/*
      - infra/common/*

resources:
  repositories:
    - repository: ADPPipelineCommon
      name: DEFRA/adp-pipeline-common
      endpoint: DEFRA
      type: github
      #ref: refs/tags/1.0.0-latest
      ref: rv/406122
      
variables:
  - name: IsAll
    value: ${{ eq(parameters.deployResources,'All') }}
  - name: IsNetwork
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources,'Network')) }}
  - name: IsNetworkAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources,'Network - All')) }}
  - name: IsNetworkVnet
    value: ${{ or(eq(variables.IsNetworkAll,true), eq(parameters.deployResources,'Network - VNET')) }}
  - name: IsNetworkNsg
    value: ${{ or(eq(variables.IsNetworkAll,true), eq(parameters.deployResources,'Network - NSGs')) }}
  - name: IsNetworkRouteTable
    value: ${{ or(eq(variables.IsNetworkAll,true), eq(parameters.deployResources,'Network - Route Tables')) }}
  - name: IsNetworkPublicDNSZone
    value: ${{ or(eq(variables.IsNetworkAll,true), eq(parameters.deployResources,'Network - Public DNS Zone')) }}
  - name: IsMonitoring
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources, 'Monitoring')) }}
  - name: IsMonitoringAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources,'Monitoring - All')) }}
  - name: IsMonitoringInsights
    value: ${{ or(eq(variables.IsMonitoringAll,true), eq(parameters.deployResources,'Monitoring - Insights')) }}
  - name: IsMonitoringAzureMonitorWorkspace
    value: ${{ or(eq(variables.IsMonitoringAll,true), eq(parameters.deployResources,'Monitoring - Azure Monitor Workspace')) }}
  - name: IsMonitoringGrafana
    value: ${{ or(eq(variables.IsMonitoringAll,true), eq(parameters.deployResources,'Monitoring - Grafana')) }}
  - name: IsMonitoringPrometheusAlerts
    value: ${{ or(eq(variables.IsMonitoringAll,true), eq(parameters.deployResources,'Monitoring - Prometheus Alerts')) }}
  - name: IsManagedCluster
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources, 'Managed Cluster')) }}
  - name: IsManagedClusterAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'Managed Cluster - All')) }}
  - name: IsManagedClusterPrivateDNSZone
    value: ${{ or(eq(variables.IsManagedClusterAll,true), eq(parameters.deployResources, 'Managed Cluster - Private DNS Zone')) }}
  - name: IsManagedClusterCluster
    value: ${{ or(eq(variables.IsManagedClusterAll,true), eq(parameters.deployResources, 'Managed Cluster - Cluster')) }}
  - name: IsManagedClusterFluxServicesSSHKeys
    value: ${{ or(eq(variables.IsManagedClusterAll,true), eq(parameters.deployResources, 'Managed Cluster - Flux Services SSH Keys')) }}
  - name: IsManagedClusterPlatformVariables
    value: ${{ or(eq(variables.IsManagedClusterAll,true), eq(parameters.deployResources, 'Managed Cluster - Platform Variables')) }}

  - name: IsPlatformKeyVault
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'Platform - Key Vault')) }}

  - name: IsFrontDoor
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources, 'Front Door')) }}
  - name: IsFrontDoorAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'Front Door - All')) }}
  - name: IsFrontDoorCore
    value: ${{ or(eq(variables.IsFrontDoorAll,true), eq(parameters.deployResources, 'Front Door - Core')) }}
  - name: IsFrontDoorWAFBaselineInternal
    value: ${{ or(eq(variables.IsFrontDoorAll,true), eq(parameters.deployResources, 'Front Door - WAF Baseline Internal')) }}
  - name: IsFrontDoorWAFBaselineExternal
    value: ${{ or(eq(variables.IsFrontDoorAll,true), eq(parameters.deployResources, 'Front Door - WAF Baseline External')) }}
  - name: IsFrontDoorWAFAdpPortal
    value: ${{ or(eq(variables.IsFrontDoorAll,true), eq(parameters.deployResources, 'Front Door - WAF ADP Portal')) }}

  - name: IsApplication
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources, 'Application')) }}
  - name: IsApplicationAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'Application - All')) }}
  - name: IsApplicationAppConfig
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - App Configuration')) }}
  - name: IsApplicationContainerRegistry
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Apps Container Registry')) }}
  - name: IsApplicationPostgreSqlServer
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - PostgreSql Server')) }}
  - name: IsApplicationRedisCache
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Redis Cache')) }}
  - name: IsApplicationStorageAccount
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Storage Account')) }}
  - name: IsApplicationServiceBus
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Service Bus')) }}
  - name: IsApplicationKeyVault
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Key Vault')) }}
  - name: IsApplicationKeyVaultPublic
    value: ${{ or(eq(variables.IsApplicationAll,true), eq(parameters.deployResources, 'Application - Key Vault - Public')) }}
  - name: IsOpenAi
    value: ${{ or(eq(variables.IsAll,true), startsWith(parameters.deployResources, 'OpenAI -')) }}
  - name: IsOpenAiAll
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'OpenAI - All')) }}
  - name: IsOpenAiInfra
    value: ${{ or(eq(variables.IsOpenAiAll,true), eq(parameters.deployResources, 'OpenAI - Infra')) }}
  - name: IsOpenAiSearchService
    value: ${{ or(eq(variables.IsOpenAiAll,true), eq(parameters.deployResources, 'OpenAI - Search Service')) }}

  - name: IsGlobalTeamPermissions
    value: ${{ or(eq(variables.IsAll,true), eq(parameters.deployResources, 'Rbac - Global Team Permissions')) }}
  - name: globalReadGroupObjectId
    value: 'dummyValueToPreventWarningInAzureDevOps'

extends:
  template: /pipelines/common-infra-deploy.yaml@ADPPipelineCommon
  parameters:
    projectName: $(projectName)
    keyVaultName: $(ssvPlatformKeyVaultName)
    deployFromFeature: ${{ parameters.deployFromFeature }}
    filePathsForTransform: |
      **/core/env/app-configuration/config-data/config-data.json
      **/infra/core/env/insights/aad-groups/monitoringpublishergroup.json    
      **/infra/core/env/open-ai/aad-groups/openaiaccessgroup.json
      **/infra/core/env/search-service/aad-groups/searchserviceaccessgroup.json
    groupedDeployments:
        - ${{ if eq(variables.IsNetwork, true) }}:
          - name: network
            deployments:
              - ${{ if eq(variables.IsNetworkRouteTable, true) }}:
                - name: route-table
                  path: infra/common/network
                  resourceGroupName: $(virtualNetworkResourceGroup)
              - ${{ if eq(variables.IsNetworkNsg, true) }}:
                - name: network-security-group
                  path: infra/common/network
                  resourceGroupName: $(virtualNetworkResourceGroup)
              - ${{ if eq(variables.IsNetworkVnet, true) }}:
                - name: virtual-network
                  path: infra/common/network
                  resourceGroupName: $(virtualNetworkResourceGroup)
              - ${{ if eq(variables.IsNetworkPublicDNSZone, true) }}:
                - name: dns-zone
                  path: infra/core/env/public-dns-zone
                  resourceGroupName: $(dnsResourceGroup)

        - ${{ if eq(variables.IsMonitoring, true) }}:
          - name: monitoring
            deployments:
              - ${{ if eq(variables.IsMonitoringInsights, true) }}:
                - name: Create or Update AAD groups
                  type: 'script'
                  scriptType: AzurePowerShell
                  serviceConnectionVariableName: ssvServiceConnection
                  path: 'infra/bootstrap/tenant/scripts/Create-AADGroups.ps1'
                  scriptArguments: > 
                    -AADGroupsJsonManifestPath 'infra/core/env/insights/aad-groups/monitoringpublishergroup.json'              
                - name: component
                  path: infra/core/env/insights
                  resourceGroupName: $(servicesResourceGroup)
                  preDeployScriptsList:
                  - displayName: 'Get Group Id'
                    type: AzurePowerShell
                    serviceConnectionVariableName: 'ssvServiceConnection'
                    inlineScript: |
                      $groupId = (Get-AzADGroup -DisplayName '$(monitoringPublisherGroup)').id
                      Write-Host "##vso[task.setvariable variable=monitoringPublisherGroup;]$groupId"
                  postDeployScriptsList:
                    - displayName: 'GetAppInsightConnectionString'
                      type: AzurePowerShell
                      inlineScript: |
                        $output = (Get-AzApplicationInsights -ResourceGroupName $(servicesResourceGroup) -Name $(applicationInsightsName)).ConnectionString
                        Write-Host "##vso[task.setvariable variable=appInsightConnectionString;]$output"
                    - displayName: Add ConnectionString to Config Service
                      scriptPath: templates/powershell/Import-ConfigData.ps1
                      type: AzureCLI
                      AzureCLIScriptType: pscore
                      scriptRepo: PipelineCommonFiles
                      scriptArguments: >
                        -Label "shared"
                        -AppConfigName $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                        -ConfigData '[{"key": "APPINSIGHTS_CONNECTIONSTRING", "value": "$(appInsightConnectionString)", "label": "shared", "contentType": "text/plain" }]'                      
              - ${{ if eq(variables.IsMonitoringAzureMonitorWorkspace, true) }}:
                - name: azure-monitor-workspace
                  path: infra/core/env/observability
                  resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsMonitoringGrafana, true) }}:
                - name: grafana
                  serviceConnectionVariableName: ssvServiceConnection
                  path: infra/core/env/observability
                  resourceGroupName: $(ssvSharedResourceGroup)
                  preDeployScriptsList:
                    - displayName: Get Azure Monitor Workspace Resource IDs to link to Grafana Dashboard
                      scriptPath: infra/core/env/scripts/Get-WorkspaceResourceIds.ps1
                      serviceConnectionVariableName: ssvServiceConnection
                      type: AzureCLI
                      azureCLIScriptType: pscore
                      scriptArguments: >
                        -ResourceGroupName $(ssvSharedResourceGroup)
                        -GrafanaName $(ssvInfraResourceNamePrefix)$(nc_resource_grafana)$(nc_shared_instance_regionid)01
                        -WorkspaceResourceId '/subscriptions/$(subscriptionId)/resourceGroups/$(servicesResourceGroup)/providers/Microsoft.Monitor/accounts/$(infraResourceNamePrefix)$(nc_resource_azuremonitorworkspace)$(nc_instance_regionid)01'
                  postDeployScriptsList:
                    - displayName: Create Flux Dashboards in Grafana
                      scriptPath: infra/core/env/scripts/New-FluxDashboards.ps1
                      type: AzureCLI
                      azureCLIScriptType: pscore
                      serviceConnectionVariableName: ssvServiceConnection
                      scriptArguments: >
                        -ResourceGroupName $(ssvSharedResourceGroup)
                        -GrafanaName $(ssvInfraResourceNamePrefix)$(nc_resource_grafana)$(nc_shared_instance_regionid)01
                        -DashboardsPath 'infra/core/env/observability/dashboards'
              - ${{ if eq(variables.IsMonitoringPrometheusAlerts, true) }}:
                - name: prometheus-alerts
                  path: infra/core/env/observability
                  resourceGroupName: $(servicesResourceGroup)

        - ${{ if eq(variables.IsPlatformKeyVault, true) }}:
          - name: platform
            deployments:                  
              - name: key-vault
                path: infra/core/env/key-vault
                parameterFilePath: infra/core/env/key-vault/platform-keyvault-params
                resourceGroupName: $(servicesResourceGroup)
                privateEndpointDnsRecordsForResources:
                  - resourceName: $(infraResourceNamePrefix)$(nc_resource_keyvault)$(nc_instance_regionid)02
                    resourceGroupName: $(servicesResourceGroup)

        - ${{ if eq(variables.IsManagedCluster, true) }}:  
          - name: managed_cluster
            ${{ if eq(variables.IsAll, true) }}:
              dependsOnGroupedDeployments:
                - network
                - application_infra
            deployments:
              - ${{ if eq(variables.IsManagedClusterPrivateDNSZone, true) }}:
                - name: aks-cluster-zone
                  path: infra/core/env/private-dns-zone
                  resourceGroupName: $(dnsResourceGroup)
                  postDeployScriptsList:
                    - displayName: Link the Private DNS Zone to Central networks
                      scriptPath: infra/core/env/scripts/Trigger-LinkPrivateDNSZones.ps1
                      type: PowerShell
                      useSystemAccessToken: true
                      scriptArguments: >
                        -PrivateDnsZoneName "$(dnsResourceNamePrefix)$(nc_resource_dnszone)$(nc_instance_regionid)01.privatelink.$(location).azmk8s.io"
                        -ResourceGroupName $(dnsResourceGroup)
                        -SubscriptionName $(subscriptionName)
                        -TenantId $(tenantId)
              - ${{ if eq(variables.IsManagedClusterCluster, true) }}:      
                - name: aks-cluster
                  path: infra/core/env/managed-cluster
                  resourceGroupName: $(aksResourceGroup)
                  postDeployScriptsList:
                    - displayName: 'Process Output Variable'
                      type: PowerShell
                      inlineScript: |
                        $output = '$(azureDeploymentOutputs)' | ConvertFrom-Json
                        Write-Host "##vso[task.setvariable variable=clusterOidc;]$($output.oidcIssuerUrl.value)"
                        Write-Host "##vso[task.setvariable variable=appConfigMiObjectId;]$($output.appConfigMiObjectId.value)"
                    - displayName: Add Cluster Details to Config Service
                      scriptPath: templates/powershell/Import-ConfigData.ps1
                      type: AzureCLI
                      AzureCLIScriptType: pscore
                      scriptRepo: PipelineCommonFiles
                      scriptArguments: >
                        -Label "adp-platform"
                        -AppConfigName $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                        -ConfigData '[{"key": "CLUSTER_OIDC_ISSUER_URL", "value": "$(clusterOidc)", "label": "adp-platform", "contentType": "text/plain" }]'
                - name: event-hub-secret-rbac
                  serviceConnectionVariableName: ssvServiceConnection
                  path: infra/core/env/event-hub
                  resourceGroupName: $(ssvEventHubConnectionStringKeyVaultRg)
              - ${{ if eq(variables.IsManagedClusterFluxServicesSSHKeys, true) }}:
                - name: Flux Services SSH Keys
                  serviceConnectionVariableName: ssvServiceConnection
                  type: 'script'
                  scriptType: AzureCLI
                  azureCLIScriptType: pscore
                  path: 'infra/core/env/scripts/SSH-Generate-Keys.ps1'
                  scriptArguments: > 
                    -AzureSubscription $(subscriptionName)
                    -KeyVaultName $(ssvPlatformKeyVaultName)
                    -KeyVaultRgName $(ssvSharedResourceGroup)
                    -KeyVaultSubscriptionId $(ssvSubscriptionId)
                    -SSHPrivateKeySecretName '$(environment)$(nc_instance_regionid)0$(environmentId)-ADP-Flux-Services-SSH-Identity'
                    -SSHPublicKeySecretName '$(environment)$(nc_instance_regionid)0$(environmentId)-ADP-Flux-Services-SSH-Identity-Pub'
                    -KnownHostsSecretName '$(environment)$(nc_instance_regionid)0$(environmentId)-ADP-Flux-Services-SSH-Identity-Known-Hosts'
                    -SSHKeyType 'ecdsa-sha2-nistp384'
                    -AppConfigMIRgName $(aksResourceGroup)
                    -AppConfigMIName $(acManagedIdentityName)
                - name: Add SSH Key to Github Repo
                  type: 'script'
                  serviceConnectionVariableName: ssvServiceConnection
                  scriptType: AzureCLI
                  azureCLIScriptType: pscore
                  path: 'infra/core/env/scripts/Add-SshKeyToGitHubRepo.ps1'
                  scriptArguments: >
                    -AppId $(ADP-GITHUB-APP-ID)
                    -AppKey $(ADP-GITHUB-PRIVATE-KEY-BASE64)
                    -Environment "$(environment)$(environmentId)"
                    -SSHPublicKeySecretName '$(environment)$(nc_instance_regionid)0$(environmentId)-ADP-Flux-Services-SSH-Identity-Pub'
                    -KeyVaultName $(ssvPlatformKeyVaultName)
                    -PSHelperDirectory '$(Pipeline.Workspace)/s/self/scripts/modules/ps-helpers'
              - ${{ if eq(variables.IsManagedClusterPlatformVariables, true) }}:
                - name: Import Config Values
                  type: 'script'
                  scriptType: AzureCLI
                  azureCLIScriptType: pscore
                  scriptRepo: PipelineCommonFiles
                  path: templates/powershell/Import-ConfigData.ps1
                  scriptArguments: >
                    -AppConfigName $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                    -ConfigDataFilePath "$(Build.SourcesDirectory)/self/infra/core/env/app-configuration/config-data/config-data.json"
                    -Label "adp-platform"
                - name: Add Secondary Event Hub App Configuration Key Value
                  type: 'script'
                  scriptType: AzureCLI
                  azureCLIScriptType: pscore
                  path: 'infra/core/env/scripts/Set-SecondaryEventHubConfig.ps1'
                  scriptArguments: >
                    -CommonFilesDownloadPath '$(Pipeline.Workspace)/s/PipelineCommonFiles/'
                    -Label "adp-platform-secondary-eventhub"
                    -AppConfigName $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                    -ConfigData '[{"key": "address", "value": "{\"uri\":\"https://$(ssvSecondEventHubConnectionStringKeyVault).vault.azure.net/secrets/$(environment)$(nc_instance_regionid)0$(environmentId)-ADP-EVENTHUB-CONNECTION\"}", "label": "adp-platform-secondary-eventhub", "contentType": "text/plain" }]'
                    -SendFluxNotificationsToSecondEventHub "$(sendFluxNotificationsToSecondEventHub)"
        - ${{ if eq(variables.IsFrontDoor, true) }}:  
          - name: front_door
            deployments:
              - ${{ if eq(variables.IsFrontDoorCore, true) }}: 
                - name: front-door
                  path: infra/core/env/front-door
                  resourceGroupName: $(cdnResourceGroup)
              - ${{ if eq(variables.IsFrontDoorWAFBaselineInternal, true) }}: 
                - name: front-door-waf
                  path: infra/core/env/front-door
                  parameterFilePath: infra/core/env/front-door/baseline/internal
                  resourceGroupName: $(cdnResourceGroup)
              - ${{ if eq(variables.IsFrontDoorWAFBaselineExternal, true) }}: 
                - name: front-door-waf
                  path: infra/core/env/front-door
                  parameterFilePath: infra/core/env/front-door/baseline/external
                  resourceGroupName: $(cdnResourceGroup)
              - ${{ if eq(variables.IsFrontDoorWAFAdpPortal, true) }}:               
                - name: front-door-waf
                  path: infra/core/env/front-door
                  parameterFilePath: infra/core/env/front-door/adp-portal/internal
                  resourceGroupName: $(cdnResourceGroup)
                  
        - ${{ if eq(variables.IsApplication, true) }}:  
          - name: application_infra
            ${{ if eq(variables.IsAll, true) }}:
              dependsOnGroupedDeployments:
              - network
            deployments:
              - ${{ if eq(variables.IsApplicationAppConfig, true) }}:  
                - name: configuration-store
                  path: infra/core/env/app-configuration
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationContainerRegistry, true) }}:  
                - name: application-container-registry
                  path: infra/core/env/container-registry
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_containerregistry)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationPostgreSqlServer, true) }}:
                - name: flexible-server-zone
                  path: infra/core/env/private-dns-zone
                  resourceGroupName: $(dnsResourceGroup)
                  postDeployScriptsList:
                    - displayName: Link the Private DNS Zone to Central networks
                      scriptPath: infra/core/env/scripts/Trigger-LinkPrivateDNSZones.ps1
                      type: PowerShell
                      useSystemAccessToken: true
                      scriptArguments: >
                        -PrivateDnsZoneName "$(dnsResourceNamePrefix)$(nc_resource_dnszone)$(nc_instance_regionid)02.private.postgres.database.azure.com"
                        -ResourceGroupName $(dnsResourceGroup)
                        -SubscriptionName $(subscriptionName)
                        -TenantId $(tenantId)
                - name: flexible-server
                  path: infra/core/env/postgre-sql
                  resourceGroupName: $(dbsResourceGroup)
                  postDeployScriptsList:
                    - displayName: 'Process Output Variable'
                      type: PowerShell
                      inlineScript: |
                        $output = '$(azureDeploymentOutputs)' | ConvertFrom-Json
                        Write-Host "##vso[task.setvariable variable=aadAdminUserMiClientId;]$($output.aadAdminUserMiClientId.value)"
                        Write-Host "##vso[task.setvariable variable=aadAdminUserMiPrincipalId;]$($output.aadAdminUserMiPrincipalId.value)"
                    - displayName: Add ADD MI ClientId to Config Service
                      scriptPath: templates/powershell/Import-ConfigData.ps1
                      type: AzureCLI
                      AzureCLIScriptType: pscore
                      scriptRepo: PipelineCommonFiles
                      scriptArguments: >
                        -Label "adp-platform"
                        -AppConfigName $(infraResourceNamePrefix)$(nc_resource_appconfiguration)$(nc_instance_regionid)01
                        -ConfigData '[{"key": "DB_AAD_ADMIN_CLIENT_ID", "value": "$(aadAdminUserMiClientId)", "label": "adp-platform", "contentType": "text/plain" },{"key": "DB_AAD_ADMIN_PRINCIPAL_ID", "value": "$(aadAdminUserMiPrincipalId)", "label": "adp-platform", "contentType": "text/plain" }]'
              - ${{ if eq(variables.IsApplicationRedisCache, true) }}:                    
                - name: redis-cache
                  path: infra/core/env/redis-cache
                  resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationStorageAccount, true) }}:                    
                - name: application-storage-account
                  path: infra/core/env/storage-account
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_storageaccount)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationServiceBus, true) }}:                                         
                - name: namespace
                  path: infra/core/env/service-bus
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_servicebus)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationKeyVault, true) }}:                    
                - name: key-vault
                  path: infra/core/env/key-vault
                  parameterFilePath: infra/core/env/key-vault/application-keyvault-params
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_keyvault)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)
              - ${{ if eq(variables.IsApplicationKeyVaultPublic, true) }}:
                - name: key-vault-public
                  path: infra/core/env/key-vault-public
                  resourceGroupName: $(servicesResourceGroup)
        - ${{ if eq(variables.IsOpenAi, true) }}:  
          - name: openai
            ${{ if eq(variables.IsAll, true) }}:
              dependsOnGroupedDeployments:
              - network
            deployments:
              - ${{ if eq(variables.IsOpenAiInfra, true) }}:
                - name: Create Open AI Access group
                  type: 'script'
                  scriptType: AzurePowerShell
                  serviceConnectionVariableName: ssvServiceConnection
                  path: 'infra/bootstrap/tenant/scripts/Create-AADGroups.ps1'
                  scriptArguments: > 
                    -AADGroupsJsonManifestPath 'infra/core/env/open-ai/aad-groups/openaiaccessgroup.json'              
                - name: open-ai
                  path: infra/core/env/open-ai
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_openai)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)                   
                  preDeployScriptsList:
                  - displayName: 'Get Group Id'
                    type: AzurePowerShell
                    serviceConnectionVariableName: 'ssvServiceConnection'
                    inlineScript: |
                      $groupId = (Get-AzADGroup -DisplayName '$(openAiUserGroup)').id
                      Write-Host "##vso[task.setvariable variable=openAiUserGroupId;]$groupId"      
              - ${{ if eq(variables.IsOpenAiSearchService, true) }}:
                - name: Create Search Service Access group
                  type: 'script'
                  scriptType: AzurePowerShell
                  serviceConnectionVariableName: ssvServiceConnection
                  path: 'infra/bootstrap/tenant/scripts/Create-AADGroups.ps1'
                  scriptArguments: > 
                    -AADGroupsJsonManifestPath 'infra/core/env/search-service/aad-groups/searchserviceaccessgroup.json'                
                - name: search-service
                  path: infra/core/env/search-service
                  resourceGroupName: $(servicesResourceGroup)
                  privateEndpointDnsRecordsForResources:
                    - resourceName: $(infraResourceNamePrefix)$(nc_resource_search)$(nc_instance_regionid)01
                      resourceGroupName: $(servicesResourceGroup)                  
                  preDeployScriptsList:
                  - displayName: 'Get Group Id'
                    type: AzurePowerShell
                    serviceConnectionVariableName: 'ssvServiceConnection'
                    inlineScript: |
                      $groupId = (Get-AzADGroup -DisplayName '$(searchServiceUserGroup)').id
                      Write-Host "##vso[task.setvariable variable=searchServiceUserGroupId;]$groupId"
                  - displayName: 'Check Private Endpoint Connection'
                    type: AzurePowerShell
                    serviceConnectionVariableName: "subscriptionName"
                    scriptPath: 'infra/core/env/scripts/PrivateEndpointConnection.ps1'
                    scriptArguments: > 
                      -OpenAiName '$(infraResourceNamePrefix)$(nc_resource_openai)$(nc_instance_regionid)01'
                      -ResourceGroupName '$(servicesResourceGroup)'
                      -SearchServiceName '$(infraResourceNamePrefix)$(nc_resource_search)$(nc_instance_regionid)01'
                      -Command 'Check'
                  postDeployScriptsList:
                  - displayName: 'Approve Private Endpoint Connection'
                    type: AzurePowerShell
                    serviceConnectionVariableName: "subscriptionName"
                    scriptPath: 'infra/core/env/scripts/PrivateEndpointConnection.ps1'
                    scriptArguments: > 
                      -OpenAiName '$(infraResourceNamePrefix)$(nc_resource_openai)$(nc_instance_regionid)01'
                      -ResourceGroupName '$(servicesResourceGroup)'
                      -SearchServiceName '$(infraResourceNamePrefix)$(nc_resource_search)$(nc_instance_regionid)01'
                      -Command 'Approve'
        - ${{ if eq(variables.IsGlobalTeamPermissions, true) }}:
          - name: global_team_permissions
            deployments:
              - name: global-team-permissions
                path: infra/core/env/global-team-permissions
                resourceGroupName: $(servicesResourceGroup)
                preDeployScriptsList:
                - displayName: 'Get Entra Global Read Group Id'
                  type: AzurePowerShell
                  serviceConnectionVariableName: ssvServiceConnection
                  scriptPath: 'infra/core/tenant/scripts/Get-EntraGroupObjectId.ps1'
                  scriptArguments: > 
                    -EntraGroupName '$(globalReadGroupName)'